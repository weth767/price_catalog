services:
  postgresproducer:
    image: postgres:14.3
    container_name: postgres_producer
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=webcrawlerproducercollector
    ports:
      - "5432:5432"
    volumes:
      - postgres_producer:/var/lib/postgresql/data
    networks:
      - webcrawler

  postgresconsumer:
    image: postgres:14.3
    container_name: postgres_consumer
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=webcrawlerconsumer
    ports:
      - "5433:5432"
    volumes:
      - postgres_consumer:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - webcrawler

  postgresusers:
    image: postgres:14.3
    container_name: postgres_user
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=webcrawlerusers
    ports:
      - "5435:5432"
    volumes:
      - ./sql/init_users.sql:/docker-entrypoint-initdb.d/init_users.sql
      - postgres_users:/var/lib/postgresql/data
    networks:
      - webcrawler

  mongodbclassifier:
    image: mongo:7.0.6
    restart: always
    container_name: mongodb_classifier
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_ROOT_DATABASE: webcrawlerclassifier
    ports:
      - "27017:27017"
    volumes:
      - ./nosql:/docker-entrypoint-initdb.d
      - mongodb_classifier:/data/db
      - mongodb_classifier:/var/log/mongodb
    networks:
      - webcrawler

  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: kafka_zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - webcrawler

  kafka:
    image: "bitnami/kafka:3.4"
    container_name: kafka
    restart: on-failure
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - webcrawler
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - "kafka_data:/bitnami"

  eureka-service:
    container_name: eureka-service
    build:
      context: ../eureka_service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - webcrawler
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka-service
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false

  user-service:
    container_name: user-service
    build:
      context: ../user_service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    networks:
      - webcrawler
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_PROFILES_ACTIVE=default
      - DB_HOST=postgresusers
      - DB_PORT=5432
      - DB_NAME=webcrawlerusers
      - DB_USER=root
      - DB_PASSWORD=root
    depends_on:
      - eureka-service

  collector-service:
    container_name: collector-service
    build:
      context: ../collector_service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - webcrawler
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_PROFILES_ACTIVE=default
      - DB_HOST=postgresproducer
      - DB_PORT=5432
      - DB_NAME=webcrawlerproducercollector
      - DB_USER=root
      - DB_PASSWORD=root
      - KAFKA_PRODUCER_BOOTSTRAP_SERVERS=http://kafka:9092
      - GATEWAY_SERVICE_URL=http://gateway-service:8080
    depends_on:
      - eureka-service

  producer-service:
    container_name: producer-service
    build:
      context: ../producer_service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - webcrawler
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_PROFILES_ACTIVE=default
      - DB_HOST=postgresproducer
      - DB_PORT=5432
      - DB_NAME=webcrawlerproducercollector
      - DB_USER=root
      - DB_PASSWORD=root
      - KAFKA_PRODUCER_BOOTSTRAP_SERVERS=http://kafka:9092
      - KAFKA_CONSUMER_BOOTSTRAP_SERVERS=http://kafka:9092
      - GATEWAY_SERVICE_URL=http://gateway-service:8080
    depends_on:
      - eureka-service

  classifier-service:
    container_name: classifier-service
    build:
      context: ../classifier_service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    networks:
      - webcrawler
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_PROFILES_ACTIVE=default
      - GATEWAY_SERVICE_URL=http://gateway-service:8080
      - MONGO_DB_HOST=mongodbclassifier
      - MONGO_DB_COLLECTION=webcrawlerclassifier
      - MONGO_DB_PORT=27017
      - MONGO_DB_USER=root
      - MONGO_DB_PASSWORD=root
    depends_on:
      - eureka-service

  consumer-service:
    container_name: consumer-service
    build:
      context: ../consumer_service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - webcrawler
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_PROFILES_ACTIVE=default
      - DB_HOST=postgresconsumer
      - DB_PORT=5432
      - DB_NAME=webcrawlerconsumer
      - DB_USER=root
      - DB_PASSWORD=root
      - KAFKA_CONSUMER_BOOTSTRAP_SERVERS=http://kafka:9092
      - GATEWAY_SERVICE_URL=http://gateway-service:8080
    depends_on:
      - eureka-service

  gateway-service:
    container_name: gateway-service
    build:
      context: ../gateway_service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - webcrawler
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
      - SPRING_PROFILES_ACTIVE=default
    depends_on:
      - user-service
      - collector-service
      - producer-service
      - classifier-service

volumes:
  postgres_producer:
    driver: local
  postgres_consumer:
    driver: local
  postgres_users:
    driver: local
  #postgres_classifier:
  #driver: local
  mongodb_classifier:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  webcrawler:
    driver: bridge
